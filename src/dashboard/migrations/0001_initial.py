# Generated by Django 5.0.6 on 2024-08-28 22:55

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_name', models.CharField(max_length=255, null=True)),
                ('program_description', models.TextField(max_length=1000, null=True)),
                ('initial_size', models.BigIntegerField(choices=[(2500, '$2,500'), (5000, '$5,000'), (10000, '$10,000'), (20000, '$20,000'), (25000, '$25,000'), (50000, '$50,000'), (75000, '$75,000'), (100000, '$100,000'), (150000, '$150,000'), (200000, '$200,000')], null=True)),
                ('type_challenge_steps', models.CharField(choices=[('instant', 'Instant'), ('challenge', 'Challenge')], max_length=255, null=True)),
                ('program_status', models.CharField(blank=True, default='Active', max_length=255, null=True)),
                ('trading_period', models.PositiveIntegerField(choices=[(4, '4 Days'), (7, '7 Days'), (14, '14 Days')], help_text='Numbers represents days, only numbers are accepted', null=True)),
                ('maximum_drawdown_limit', models.DecimalField(decimal_places=2, default=True, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('daily_drawdown_limit', models.DecimalField(decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('program_first_profit_target', models.DecimalField(decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('program_second_profit_target', models.DecimalField(decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('program_profit_split', models.DecimalField(decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('payout_frequency', models.PositiveIntegerField(choices=[(4, '4 Days'), (7, '7 Days'), (14, '14 Days')], null=True)),
                ('instruments', models.CharField(blank=True, help_text='Comma-separated instruments', max_length=255, null=True)),
                ('liquidity_provider', models.CharField(choices=[('alaric_securities', 'Alaric Securities')], max_length=200, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='programs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TradingAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(blank=True, max_length=20, null=True)),
                ('account_name', models.CharField(blank=True, max_length=20, null=True)),
                ('account_equity', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('payment_type', models.CharField(blank=True, max_length=40, null=True)),
                ('evaluation_starts', models.DateTimeField(auto_now_add=True)),
                ('owner_account', models.CharField(blank=True, max_length=255, null=True)),
                ('program_name_of_account', models.CharField(blank=True, max_length=255, null=True)),
                ('profit_split', models.DecimalField(blank=True, decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('account_maximum_drawdown_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('account_daily_drawdown_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('first_profit_target', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('second_profit_target', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=10, null=True)),
                ('profit_target_achieved', models.BooleanField(blank=True, default=False, null=True)),
                ('account_age', models.DateField(blank=True, null=True)),
                ('evaluation_ends', models.DateField(blank=True, null=True)),
                ('challenge_steps', models.CharField(blank=True, max_length=255, null=True)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('pending', 'Pending'), ('challenge', 'Challenge'), ('suspended', 'Suspended')], default='active', max_length=10)),
                ('passed_evaluation', models.CharField(blank=True, max_length=255, null=True)),
                ('suspended', models.BooleanField(blank=True, default=False, null=True)),
                ('email_alaric', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('user_code', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('password_alaric', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('is_account_used', models.BooleanField(blank=True, default=False, null=True)),
                ('current_drawdown', models.DecimalField(blank=True, decimal_places=2, help_text='Enter a percentage between 0 and 100.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('account_pnl', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('time_of_last_profit_received', models.DateTimeField(blank=True, null=True)),
                ('current_profit_number', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('current_profit_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('last_date_of_payout', models.DateField(blank=True, null=True)),
                ('numbers_of_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('eligible_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('program', models.ManyToManyField(blank=True, related_name='trading_accounts', to='dashboard.program')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trading_accounts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='program',
            name='trading_account',
            field=models.ManyToManyField(blank=True, related_name='programs', to='dashboard.tradingaccount'),
        ),
        migrations.CreateModel(
            name='UserPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_bool', models.BooleanField(default=False)),
                ('payment_issued_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('stripe_checkout_id', models.CharField(max_length=500)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
